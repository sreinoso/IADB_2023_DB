{
  "paragraphs": [
    {
      "text": "%md\nTransformaciones elemento-a-elemento\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\n#### Generan un nuevo RDD a partir de uno dado",
      "user": "anonymous",
      "dateUpdated": "Jul 3, 2017 6:17:30 PM",
      "config": {
        "enabled": false,
        "tableHide": false,
        "editorMode": "ace/mode/markdown",
        "results": {},
        "editorHide": true,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch1\u003eTransformaciones elemento-a-elemento\u003c/h1\u003e\n\u003ch4\u003eGeneran un nuevo RDD a partir de uno dado\u003c/h4\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1490982454830_-1423386709",
      "id": "20170329-192247_460637763",
      "dateCreated": "Mar 31, 2017 5:47:34 PM",
      "dateStarted": "Jul 3, 2017 6:16:37 PM",
      "dateFinished": "Jul 3, 2017 6:16:37 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n-   `filter(func)` filtra los elementos de un RDD",
      "user": "anonymous",
      "dateUpdated": "Jul 3, 2017 6:17:32 PM",
      "config": {
        "enabled": false,
        "tableHide": false,
        "editorMode": "ace/mode/markdown",
        "results": {},
        "editorHide": true,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003efilter(func)\u003c/code\u003e filtra los elementos de un RDD\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1490982454830_-1423386709",
      "id": "20170329-194127_552689603",
      "dateCreated": "Mar 31, 2017 5:47:34 PM",
      "dateStarted": "Jul 3, 2017 6:16:48 PM",
      "dateFinished": "Jul 3, 2017 6:16:48 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n# Obtener los valores positivos de un rango de números\nfrom __future__ import print_function\nfrom test_helper import Test\nrdd \u003d sc.parallelize(xrange(-5,5))          # Rango [-5, 5)\nfiltered_rdd \u003d rdd.filter(lambda x: x \u003e\u003d 0)   # Devuelve los positivos\n\nTest.assertEquals(filtered_rdd.collect(), [0, 1, 2, 3, 4])",
      "user": "anonymous",
      "dateUpdated": "Jul 28, 2017 3:05:43 PM",
      "config": {
        "enabled": true,
        "tableHide": false,
        "editorMode": "ace/mode/python",
        "results": {},
        "editorHide": false,
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "colWidth": 6.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "1 test passed.\n"
          }
        ]
      },
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            "http://10.0.2.15:4040/jobs/job?id\u003d0"
          ],
          "interpreterSettingId": "2CET3TKHW"
        }
      },
      "apps": [],
      "jobName": "paragraph_1490982454831_-1423771457",
      "id": "20170329-194229_1474982906",
      "dateCreated": "Mar 31, 2017 5:47:34 PM",
      "dateStarted": "Jul 28, 2017 3:05:44 PM",
      "dateFinished": "Jul 28, 2017 3:06:16 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\n// Obtener los valores positivos de un rango de números\nval rdd \u003d sc.parallelize(-5 to 5)         // Rango [-5, 5]\nval filtered_rdd \u003d rdd.filter(x \u003d\u003e x\u003e\u003d0)  // Devuelve los positivos\n\nassert(filtered_rdd.collect().sameElements(Array(0, 1, 2, 3, 4, 5)))",
      "user": "anonymous",
      "dateUpdated": "Jun 23, 2017 3:57:38 PM",
      "config": {
        "enabled": true,
        "tableHide": false,
        "editorMode": "ace/mode/scala",
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "colWidth": 6.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1490982454831_-1423771457",
      "id": "20170329-194301_1724116151",
      "dateCreated": "Mar 31, 2017 5:47:34 PM",
      "dateStarted": "Jun 23, 2017 3:57:38 PM",
      "dateFinished": "Jun 23, 2017 3:57:40 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md \n-   `map(func)` aplica una función a los elementos de un RDD",
      "user": "anonymous",
      "dateUpdated": "Jul 28, 2017 3:06:01 PM",
      "config": {
        "enabled": false,
        "tableHide": false,
        "editorMode": "ace/mode/markdown",
        "results": {},
        "editorHide": true,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003emap(func)\u003c/code\u003e aplica una función a los elementos de un RDD\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1490982454832_-1413383237",
      "id": "20170329-194732_589413907",
      "dateCreated": "Mar 31, 2017 5:47:34 PM",
      "dateStarted": "Jul 3, 2017 6:17:05 PM",
      "dateFinished": "Jul 3, 2017 6:17:05 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n# Ejemplo en PySpark\n# Añade 1 a cada elemento del RDD\n# Para cada elemento, obtiene una tupla (x, x**2)\ndef add1(x):\n    return(x+1)\n\nsquared_rdd \u003d (filtered_rdd\n               .map(add1)                 # Añade 1 a cada elemento del RDD\n               .map(lambda x: (x, x*x)))  # Para cada elemento, obtén una tupla (x, x**2)\n\nTest.assertEquals(squared_rdd.collect(), [(1, 1), (2, 4), (3, 9), (4, 16), (5, 25)])",
      "user": "anonymous",
      "dateUpdated": "Jun 23, 2017 3:59:27 PM",
      "config": {
        "enabled": true,
        "tableHide": false,
        "editorMode": "ace/mode/python",
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "colWidth": 6.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1490982454832_-1413383237",
      "id": "20170329-195917_481246446",
      "dateCreated": "Mar 31, 2017 5:47:34 PM",
      "dateStarted": "Jun 23, 2017 3:59:27 PM",
      "dateFinished": "Jun 23, 2017 3:59:28 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\n/* Añade 1 a cada elemento del RDD\n   Para cada elemento, obtén una tupla (x, x**2) */\ndef add1(x: Int): Int \u003d return(x+1)\n\nval squared_rdd \u003d (filtered_rdd\n               .map(add1)\n               .map(x \u003d\u003e (x, x*x))) \n               \nassert(squared_rdd.collect().sameElements(Array((1,1), (2,4), (3,9), (4,16), (5,25), (6,36))))",
      "user": "anonymous",
      "dateUpdated": "Jun 23, 2017 4:00:31 PM",
      "config": {
        "enabled": true,
        "tableHide": false,
        "editorMode": "ace/mode/scala",
        "results": {},
        "editorSetting": {
          "language": "scala"
        },
        "colWidth": 6.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1490982454833_-1413767986",
      "id": "20170329-200007_747312822",
      "dateCreated": "Mar 31, 2017 5:47:34 PM",
      "dateStarted": "Jun 23, 2017 4:00:31 PM",
      "dateFinished": "Jun 23, 2017 4:00:33 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n-   `flatMap(func)` igual que `map`, pero “aplana” la salida",
      "user": "anonymous",
      "dateUpdated": "Jul 8, 2017 6:30:38 PM",
      "config": {
        "enabled": false,
        "tableHide": false,
        "editorMode": "ace/mode/markdown",
        "results": {},
        "editorHide": true,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003eflatMap(func)\u003c/code\u003e igual que \u003ccode\u003emap\u003c/code\u003e, pero “aplana” la salida\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1490982454834_-1412613739",
      "id": "20170329-200235_551474283",
      "dateCreated": "Mar 31, 2017 5:47:34 PM",
      "dateStarted": "Jul 3, 2017 6:17:11 PM",
      "dateFinished": "Jul 3, 2017 6:17:11 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nsquaredflat_rdd \u003d (filtered_rdd\n                   .map(add1)\n                   .flatMap(lambda x: (x, x*x)))  # Da la salida en forma de lista\n                   \nTest.assertEquals(squaredflat_rdd.collect(), [1, 1, 2, 4, 3, 9, 4, 16, 5, 25])",
      "user": "anonymous",
      "dateUpdated": "Jun 23, 2017 4:02:30 PM",
      "config": {
        "enabled": true,
        "tableHide": false,
        "editorMode": "ace/mode/python",
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "colWidth": 6.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1490982454834_-1412613739",
      "id": "20170329-201220_1330474112",
      "dateCreated": "Mar 31, 2017 5:47:34 PM",
      "dateStarted": "Jun 23, 2017 4:02:30 PM",
      "dateFinished": "Jun 23, 2017 4:02:31 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\n\nval squaredflat_rdd \u003d (filtered_rdd\n                       .map(add1)\n                       .flatMap(x \u003d\u003e List(x, x*x)))  // Da la salida en forma de lista\n                       \nassert(squaredflat_rdd.collect().sameElements(Array(1, 1, 2, 4, 3, 9, 4, 16, 5, 25, 6, 36)))",
      "user": "anonymous",
      "dateUpdated": "Jun 23, 2017 4:02:44 PM",
      "config": {
        "enabled": true,
        "tableHide": false,
        "editorMode": "ace/mode/scala",
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "colWidth": 6.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1490982454835_-1412998488",
      "id": "20170329-201242_1122456382",
      "dateCreated": "Mar 31, 2017 5:47:34 PM",
      "dateStarted": "Jun 23, 2017 4:02:44 PM",
      "dateFinished": "Jun 23, 2017 4:02:46 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n-   `sample(withReplacement, fraction, seed\u003dNone)` devuelve una muestra del RDD\n    - `withReplacement` - si True, cada elemento puede aparecer varias veces en la muestra\n    - `fraction` - tamaño esperado de la muestra como una fracción del tamaño del RDD \n        -  **sin reemplazo**: probabilidad de seleccionar un elemento, su valor debe ser [0, 1]\n        -  **con reemplazo**: número esperado de veces que se escoge un elemento, su valor debe ser \u003e\u003d 0\n    - `seed` - semilla para el generador de números aleatorios\n",
      "user": "anonymous",
      "dateUpdated": "Jul 3, 2017 6:17:25 PM",
      "config": {
        "enabled": false,
        "tableHide": false,
        "editorMode": "ace/mode/markdown",
        "results": {},
        "editorHide": true,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003esample(withReplacement, fraction, seed\u003dNone)\u003c/code\u003e devuelve una muestra del RDD\n    \u003cul\u003e\n      \u003cli\u003e\u003ccode\u003ewithReplacement\u003c/code\u003e - si True, cada elemento puede aparecer varias veces en la muestra\u003c/li\u003e\n      \u003cli\u003e\u003ccode\u003efraction\u003c/code\u003e - tamaño esperado de la muestra como una fracción del tamaño del RDD\n        \u003cul\u003e\n          \u003cli\u003e\u003cstrong\u003esin reemplazo\u003c/strong\u003e: probabilidad de seleccionar un elemento, su valor debe ser [0, 1]\u003c/li\u003e\n          \u003cli\u003e\u003cstrong\u003econ reemplazo\u003c/strong\u003e: número esperado de veces que se escoge un elemento, su valor debe ser \u0026gt;\u003d 0\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003e\u003ccode\u003eseed\u003c/code\u003e - semilla para el generador de números aleatorios\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1490982454840_-1416461228",
      "id": "20170329-201743_290559078",
      "dateCreated": "Mar 31, 2017 5:47:34 PM",
      "dateStarted": "Jul 3, 2017 6:17:20 PM",
      "dateFinished": "Jul 3, 2017 6:17:20 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nsrdd1 \u003d squaredflat_rdd.sample(False, 0.5)\nsrdd2 \u003d squaredflat_rdd.sample(True, 2)\nsrdd3 \u003d squaredflat_rdd.sample(False, 0.8, 14)\nprint(\u0027s1\u003d{0}\\ns2\u003d{1}\\ns3\u003d{2}\u0027.format(srdd1.collect(), srdd2.collect(), srdd3.collect()))",
      "user": "anonymous",
      "dateUpdated": "Jun 23, 2017 4:29:40 PM",
      "config": {
        "enabled": true,
        "tableHide": false,
        "editorMode": "ace/mode/python",
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "colWidth": 6.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1490982454841_-1416845977",
      "id": "20170329-203311_862513240",
      "dateCreated": "Mar 31, 2017 5:47:34 PM",
      "dateStarted": "Jun 23, 2017 4:29:40 PM",
      "dateFinished": "Jun 23, 2017 4:29:42 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\nval s1 \u003d squaredflat_rdd.sample(false, 0.5).collect()\nval s2 \u003d squaredflat_rdd.sample(true, 2).collect()\nval s3 \u003d squaredflat_rdd.sample(false, 0.8).collect()",
      "user": "anonymous",
      "dateUpdated": "Jun 23, 2017 4:29:55 PM",
      "config": {
        "enabled": true,
        "tableHide": false,
        "editorMode": "ace/mode/scala",
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "colWidth": 6.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1490982454842_-1415691731",
      "id": "20170329-203347_1552507870",
      "dateCreated": "Mar 31, 2017 5:47:34 PM",
      "dateStarted": "Jun 23, 2017 4:29:55 PM",
      "dateFinished": "Jun 23, 2017 4:29:57 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n-   `distinct()` devuelve un nuevo RDD sin duplicados\n    - El orden de la salida no está definido",
      "user": "anonymous",
      "dateUpdated": "Jul 8, 2017 6:30:46 PM",
      "config": {
        "enabled": false,
        "tableHide": false,
        "editorMode": "ace/mode/markdown",
        "results": {},
        "editorHide": true,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003edistinct()\u003c/code\u003e devuelve un nuevo RDD sin duplicados\n    \u003cul\u003e\n      \u003cli\u003eEl orden de la salida no está definido\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1490982454843_-1416076479",
      "id": "20170329-203441_1844476828",
      "dateCreated": "Mar 31, 2017 5:47:34 PM",
      "dateStarted": "Jul 3, 2017 6:17:46 PM",
      "dateFinished": "Jul 3, 2017 6:17:46 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\ndistinct_rdd \u003d squaredflat_rdd.distinct()\nprint(distinct_rdd.collect())",
      "user": "anonymous",
      "dateUpdated": "Jun 23, 2017 4:30:44 PM",
      "config": {
        "enabled": true,
        "tableHide": false,
        "editorMode": "ace/mode/python",
        "results": {},
        "editorHide": false,
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "colWidth": 6.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1490982454844_-1418000224",
      "id": "20170329-203628_228751011",
      "dateCreated": "Mar 31, 2017 5:47:34 PM",
      "dateStarted": "Jun 23, 2017 4:30:44 PM",
      "dateFinished": "Jun 23, 2017 4:30:45 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\nval distinct_rdd \u003d squaredflat_rdd.distinct()\nprintln(distinct_rdd.collect().mkString(\" \"))",
      "user": "anonymous",
      "dateUpdated": "Jun 23, 2017 4:31:12 PM",
      "config": {
        "enabled": true,
        "tableHide": false,
        "editorMode": "ace/mode/scala",
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "colWidth": 6.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1490982454845_-1418384973",
      "id": "20170329-203700_15282910",
      "dateCreated": "Mar 31, 2017 5:47:34 PM",
      "dateStarted": "Jun 23, 2017 4:31:12 PM",
      "dateFinished": "Jun 23, 2017 4:31:13 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n-   `groupBy(func)` devuelve un RDD con los datos agrupados en formato clave/valor, \nusando una función para obtener la clave",
      "user": "anonymous",
      "dateUpdated": "Jul 8, 2017 6:30:50 PM",
      "config": {
        "enabled": false,
        "tableHide": false,
        "editorMode": "ace/mode/markdown",
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false
            }
          }
        },
        "editorHide": true,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "title": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003egroupBy(func)\u003c/code\u003e devuelve un RDD con los datos agrupados en formato clave/valor,\u003cbr/\u003eusando una función para obtener la clave\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1490982454846_-1417230726",
      "id": "20170329-203811_1642837733",
      "dateCreated": "Mar 31, 2017 5:47:34 PM",
      "dateStarted": "Jul 3, 2017 6:17:50 PM",
      "dateFinished": "Jul 3, 2017 6:17:50 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\ngrouped_rdd \u003d distinct_rdd.groupBy(lambda x: x%3)\nprint(grouped_rdd.collect())\nprint([(x,sorted(y)) for (x,y) in grouped_rdd.collect()])",
      "user": "anonymous",
      "dateUpdated": "Jun 23, 2017 4:34:52 PM",
      "config": {
        "enabled": true,
        "tableHide": false,
        "editorMode": "ace/mode/python",
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "colWidth": 6.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1490982454846_-1417615475",
      "id": "20170329-204857_1028989163",
      "dateCreated": "Mar 31, 2017 5:47:34 PM",
      "dateStarted": "Jun 23, 2017 4:34:52 PM",
      "dateFinished": "Jun 23, 2017 4:34:53 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\nval grouped_rdd \u003d distinct_rdd.groupBy(x \u003d\u003e x%3)\nval grouped \u003d grouped_rdd.collect()\ngrouped.foreach(f \u003d\u003e println(f._1+\" (\"+f._2.mkString(\" \")+\") \"))",
      "user": "anonymous",
      "dateUpdated": "Jun 23, 2017 4:37:52 PM",
      "config": {
        "enabled": true,
        "tableHide": false,
        "editorMode": "ace/mode/scala",
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "colWidth": 6.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1490982454847_-1417615475",
      "id": "20170329-204934_1104249486",
      "dateCreated": "Mar 31, 2017 5:47:34 PM",
      "dateStarted": "Jun 23, 2017 4:37:52 PM",
      "dateFinished": "Jun 23, 2017 4:37:54 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### Transformaciones sobre dos RDDs\n\nOperaciones tipo conjunto sobre dos RDDs\n",
      "user": "anonymous",
      "dateUpdated": "Jul 8, 2017 6:30:54 PM",
      "config": {
        "enabled": false,
        "tableHide": false,
        "editorMode": "ace/mode/markdown",
        "results": {},
        "editorHide": true,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eTransformaciones sobre dos RDDs\u003c/h3\u003e\n\u003cp\u003eOperaciones tipo conjunto sobre dos RDDs\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1490982454849_-1432235933",
      "id": "20170329-205114_575254284",
      "dateCreated": "Mar 31, 2017 5:47:34 PM",
      "dateStarted": "Jul 3, 2017 6:18:07 PM",
      "dateFinished": "Jul 3, 2017 6:18:07 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n-   `rdda.union(rddb)` devuelve un RDD con los datos de los dos de partida",
      "user": "anonymous",
      "dateUpdated": "Jul 8, 2017 6:30:58 PM",
      "config": {
        "enabled": false,
        "editorMode": "ace/mode/markdown",
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003erdda.union(rddb)\u003c/code\u003e devuelve un RDD con los datos de los dos de partida\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1490982454850_-1431081687",
      "id": "20170329-205757_2112017013",
      "dateCreated": "Mar 31, 2017 5:47:34 PM",
      "dateStarted": "Jul 3, 2017 6:18:11 PM",
      "dateFinished": "Jul 3, 2017 6:18:11 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nrdda \u003d sc.parallelize([\u0027a\u0027, \u0027b\u0027, \u0027c\u0027])\nrddb \u003d sc.parallelize([\u0027c\u0027, \u0027d\u0027, \u0027e\u0027])\nrddu \u003d rdda.union(rddb)\nTest.assertEquals(rddu.collect(),[\u0027a\u0027, \u0027b\u0027, \u0027c\u0027, \u0027c\u0027, \u0027d\u0027, \u0027e\u0027])",
      "user": "anonymous",
      "dateUpdated": "Jun 23, 2017 4:40:10 PM",
      "config": {
        "colWidth": 6.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1498230458342_378464026",
      "id": "20170623-150738_1168158715",
      "dateCreated": "Jun 23, 2017 3:07:38 PM",
      "dateStarted": "Jun 23, 2017 4:40:11 PM",
      "dateFinished": "Jun 23, 2017 4:40:11 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\nval rdda \u003d sc.parallelize(List(\u0027a\u0027, \u0027b\u0027, \u0027c\u0027))\nval rddb \u003d sc.parallelize(List(\u0027c\u0027, \u0027d\u0027, \u0027e\u0027))\nval rddu \u003d rdda.union(rddb)\nassert(rddu.collect().sameElements(Array(\u0027a\u0027, \u0027b\u0027, \u0027c\u0027, \u0027c\u0027, \u0027d\u0027, \u0027e\u0027)))",
      "user": "anonymous",
      "dateUpdated": "Jun 23, 2017 4:40:36 PM",
      "config": {
        "colWidth": 6.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1498230496878_1759189911",
      "id": "20170623-150816_1429594386",
      "dateCreated": "Jun 23, 2017 3:08:16 PM",
      "dateStarted": "Jun 23, 2017 4:40:37 PM",
      "dateFinished": "Jun 23, 2017 4:40:39 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n- `rdda.intersection(rddb)` devuelve un RDD con los datos comunes en ambos RDDs",
      "user": "anonymous",
      "dateUpdated": "Jul 8, 2017 6:31:02 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": false,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003erdda.intersection(rddb)\u003c/code\u003e devuelve un RDD con los datos comunes en ambos RDDs\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1498230565903_1726163326",
      "id": "20170623-150925_1009184379",
      "dateCreated": "Jun 23, 2017 3:09:25 PM",
      "dateStarted": "Jul 3, 2017 6:18:22 PM",
      "dateFinished": "Jul 3, 2017 6:18:22 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nrddi \u003d rdda.intersection(rddb)\nTest.assertEquals(rddi.collect(),[\u0027c\u0027])",
      "user": "anonymous",
      "dateUpdated": "Jun 23, 2017 4:41:04 PM",
      "config": {
        "colWidth": 6.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1498230753020_-2048514544",
      "id": "20170623-151233_690863371",
      "dateCreated": "Jun 23, 2017 3:12:33 PM",
      "dateStarted": "Jun 23, 2017 4:41:04 PM",
      "dateFinished": "Jun 23, 2017 4:41:06 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\nval rddi \u003d rdda.intersection(rddb)\nassert(rddi.collect().sameElements(Array(\u0027c\u0027)))",
      "user": "anonymous",
      "dateUpdated": "Jun 23, 2017 4:41:20 PM",
      "config": {
        "colWidth": 6.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1498230877063_-1732700282",
      "id": "20170623-151437_492376933",
      "dateCreated": "Jun 23, 2017 3:14:37 PM",
      "dateStarted": "Jun 23, 2017 4:41:20 PM",
      "dateFinished": "Jun 23, 2017 4:41:21 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n-   `rdda.subtract(rddb)` devuelve un RDD con los datos del primer RDD menos los del segundo",
      "user": "anonymous",
      "dateUpdated": "Jul 8, 2017 6:31:06 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": false,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003erdda.subtract(rddb)\u003c/code\u003e devuelve un RDD con los datos del primer RDD menos los del segundo\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1498230926719_-558938657",
      "id": "20170623-151526_969885287",
      "dateCreated": "Jun 23, 2017 3:15:26 PM",
      "dateStarted": "Jul 3, 2017 6:18:27 PM",
      "dateFinished": "Jul 3, 2017 6:18:27 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nrdds \u003d rdda.subtract(rddb)\nTest.assertEquals(rdds.collect(), [\u0027a\u0027, \u0027b\u0027])",
      "user": "anonymous",
      "dateUpdated": "Jun 23, 2017 4:42:57 PM",
      "config": {
        "colWidth": 6.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python",
        "editorHide": false,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1498231077523_-1912269105",
      "id": "20170623-151757_1166441932",
      "dateCreated": "Jun 23, 2017 3:17:57 PM",
      "dateStarted": "Jun 23, 2017 4:42:57 PM",
      "dateFinished": "Jun 23, 2017 4:43:00 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\nval rdds \u003d rdda.subtract(rddb)\nassert(rdds.collect().sameElements(Array(\u0027a\u0027, \u0027b\u0027)))",
      "user": "anonymous",
      "dateUpdated": "Jun 23, 2017 4:43:04 PM",
      "config": {
        "colWidth": 6.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1498231094147_-499288898",
      "id": "20170623-151814_2051185449",
      "dateCreated": "Jun 23, 2017 3:18:14 PM",
      "dateStarted": "Jun 23, 2017 4:43:04 PM",
      "dateFinished": "Jun 23, 2017 4:43:05 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n`rdda.cartesian(rddb)` producto cartesiano de ambos RDDs (operación muy costosa)",
      "user": "anonymous",
      "dateUpdated": "Jul 8, 2017 6:31:10 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": false,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003e\u003ccode\u003erdda.cartesian(rddb)\u003c/code\u003e producto cartesiano de ambos RDDs (operación muy costosa)\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1498231174405_195506319",
      "id": "20170623-151934_1260452805",
      "dateCreated": "Jun 23, 2017 3:19:34 PM",
      "dateStarted": "Jul 3, 2017 6:18:32 PM",
      "dateFinished": "Jul 3, 2017 6:18:32 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nrddc \u003d rdda.cartesian(rddb)\nTest.assertEquals(rddc.collect(), \n                  [(\u0027a\u0027,\u0027c\u0027),(\u0027a\u0027,\u0027d\u0027),(\u0027a\u0027,\u0027e\u0027),(\u0027b\u0027,\u0027c\u0027),(\u0027b\u0027,\u0027d\u0027),(\u0027b\u0027,\u0027e\u0027),(\u0027c\u0027,\u0027c\u0027), (\u0027c\u0027,\u0027d\u0027), (\u0027c\u0027,\u0027e\u0027)])",
      "user": "anonymous",
      "dateUpdated": "Jun 23, 2017 4:43:56 PM",
      "config": {
        "colWidth": 6.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1498231219606_129991736",
      "id": "20170623-152019_1868962375",
      "dateCreated": "Jun 23, 2017 3:20:19 PM",
      "dateStarted": "Jun 23, 2017 4:43:56 PM",
      "dateFinished": "Jun 23, 2017 4:43:57 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\nval rddc \u003d rdda.cartesian(rddb)\nassert(rddc.collect().sameElements( \n                  Array((\u0027a\u0027,\u0027c\u0027),(\u0027a\u0027,\u0027d\u0027),(\u0027a\u0027,\u0027e\u0027),(\u0027b\u0027,\u0027c\u0027),(\u0027b\u0027,\u0027d\u0027),(\u0027b\u0027,\u0027e\u0027),(\u0027c\u0027,\u0027c\u0027), (\u0027c\u0027,\u0027d\u0027), (\u0027c\u0027,\u0027e\u0027))))",
      "user": "anonymous",
      "dateUpdated": "Jun 23, 2017 4:44:02 PM",
      "config": {
        "colWidth": 6.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1498231244286_-775676526",
      "id": "20170623-152044_192972117",
      "dateCreated": "Jun 23, 2017 3:20:44 PM",
      "dateStarted": "Jun 23, 2017 4:44:02 PM",
      "dateFinished": "Jun 23, 2017 4:44:03 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nAcciones sobre RDDs simples\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\n#### Obtienen datos (simples o compuestos) a partir de un RDD\n",
      "user": "anonymous",
      "dateUpdated": "Jul 8, 2017 6:31:13 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": false,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch1\u003eAcciones sobre RDDs simples\u003c/h1\u003e\n\u003ch4\u003eObtienen datos (simples o compuestos) a partir de un RDD\u003c/h4\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1498231296896_-1809234665",
      "id": "20170623-152136_1488130107",
      "dateCreated": "Jun 23, 2017 3:21:36 PM",
      "dateStarted": "Jul 3, 2017 6:18:38 PM",
      "dateFinished": "Jul 3, 2017 6:18:38 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n#### Principales acciones de agregación: `reduce` y `fold`",
      "user": "anonymous",
      "dateUpdated": "Jul 8, 2017 6:31:33 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": false,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch4\u003ePrincipales acciones de agregación: \u003ccode\u003ereduce\u003c/code\u003e y \u003ccode\u003efold\u003c/code\u003e\u003c/h4\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1498231451923_808794421",
      "id": "20170623-152411_769750178",
      "dateCreated": "Jun 23, 2017 3:24:11 PM",
      "dateStarted": "Jul 3, 2017 6:18:40 PM",
      "dateFinished": "Jul 3, 2017 6:18:40 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n-   `reduce(op)` combina los elementos de un RDD en paralelo, aplicando un operador\n    - El operador de reducción debe ser un *monoide conmutativo* (operador binario asociativo y conmutativo)\n    - Primero se realiza la redución a nivel de partición y luego se van reduciendo los valores intermedios",
      "user": "anonymous",
      "dateUpdated": "Jul 8, 2017 6:31:35 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": false,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003ereduce(op)\u003c/code\u003e combina los elementos de un RDD en paralelo, aplicando un operador\n    \u003cul\u003e\n      \u003cli\u003eEl operador de reducción debe ser un \u003cem\u003emonoide conmutativo\u003c/em\u003e (operador binario asociativo y conmutativo)\u003c/li\u003e\n      \u003cli\u003ePrimero se realiza la redución a nivel de partición y luego se van reduciendo los valores intermedios\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1498231474027_915231949",
      "id": "20170623-152434_1207380535",
      "dateCreated": "Jun 23, 2017 3:24:34 PM",
      "dateStarted": "Jul 4, 2017 3:26:33 PM",
      "dateFinished": "Jul 4, 2017 3:26:33 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nrdd \u003d sc.parallelize(xrange(1,10), 8)  # rango [1, 10)\nprint(rdd.glom().collect())\n\n# Reducción con una función lambda\np \u003d rdd.reduce(lambda x,y: x*y) # r \u003d 1*2*3*4*5*6*7*8*9 \u003d 362880\nprint(\"1*2*3*4*5*6*7*8*9 \u003d {0}\".format(p))\n\n# Reducción con un operador predefinido\nfrom operator import add\ns \u003d rdd.reduce(add) # s \u003d 1+2+3+4+5+6+7+8+9 \u003d 45\nprint(\"1+2+3+4+5+6+7+8+9 \u003d {0}\".format(s))\n\n# Prueba con un operador no conmutativo\np \u003d rdd.reduce(lambda x,y: x-y) # r \u003d 1-2-3-4-5-6-7-8-9 \u003d -43\nprint(\"1-2-3-4-5-6-7-8-9 \u003d {0}\".format(p))\n\n# No funciona con RDDs vacíos\n#sc.parallelize([]).reduce(add)\n",
      "user": "anonymous",
      "dateUpdated": "Jul 8, 2017 6:29:58 PM",
      "config": {
        "colWidth": 6.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1498231489580_-972330831",
      "id": "20170623-152449_2044341447",
      "dateCreated": "Jun 23, 2017 3:24:49 PM",
      "dateStarted": "Jul 8, 2017 6:29:58 PM",
      "dateFinished": "Jul 8, 2017 6:29:59 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\nval rdd \u003d sc.parallelize(1 to 9)    // rango [1, 9]\nval l \u003d rdd.glom().collect()\n\n// Reducciones conn funciones anónimas\nval p \u003d rdd.reduce((x,y) \u003d\u003e x*y)    // r \u003d 1*2*3*4*5*6*7*8*9 \u003d 362880\nval s \u003d rdd.reduce(_+_)             // s \u003d 1+2+3+4+5+6+7+8+9 \u003d 45\n\n// No funciona con RDDs vacíos\n//sc.parallelize(List[Int]()).reduce(_+_)",
      "user": "anonymous",
      "dateUpdated": "Jul 8, 2017 6:29:54 PM",
      "config": {
        "colWidth": 6.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1498231569503_1973999625",
      "id": "20170623-152609_1304876764",
      "dateCreated": "Jun 23, 2017 3:26:09 PM",
      "dateStarted": "Jul 8, 2017 6:29:54 PM",
      "dateFinished": "Jul 8, 2017 6:29:57 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n-   `fold(cero, op)` versión general de `reduce`: \n    - Debemos proporcionar un valor inicial `cero` para el operador\n    - El valor inicial debe ser el valor identidad para el operador (p.e. 0 para suma; 1 para producto, o una lista vacía para concatenación de listas)\n        - Permite utilizar RDDs vacíos\n    - La función `op` debe ser un monoide conmutativo para garantizar un resultado consistente\n        - Comportamiento diferente a las operaciones `fold` de lenguajes como Scala\n        - El operador se aplica a nivel de partición (usando `cero` como valor inicial), y finalmente entre todas las particiones (usando `cero`de nuevo)\n        - Para operadores no conmutativos el resultado podría ser diferente del obtenido mediante un `fold` secuencial",
      "user": "anonymous",
      "dateUpdated": "Jul 8, 2017 6:32:02 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": false,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003efold(cero, op)\u003c/code\u003e versión general de \u003ccode\u003ereduce\u003c/code\u003e:\n    \u003cul\u003e\n      \u003cli\u003eDebemos proporcionar un valor inicial \u003ccode\u003ecero\u003c/code\u003e para el operador\u003c/li\u003e\n      \u003cli\u003eEl valor inicial debe ser el valor identidad para el operador (p.e. 0 para suma; 1 para producto, o una lista vacía para concatenación de listas)\n        \u003cul\u003e\n          \u003cli\u003ePermite utilizar RDDs vacíos\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n      \u003cli\u003eLa función \u003ccode\u003eop\u003c/code\u003e debe ser un monoide conmutativo para garantizar un resultado consistente\n        \u003cul\u003e\n          \u003cli\u003eComportamiento diferente a las operaciones \u003ccode\u003efold\u003c/code\u003e de lenguajes como Scala\u003c/li\u003e\n          \u003cli\u003eEl operador se aplica a nivel de partición (usando \u003ccode\u003ecero\u003c/code\u003e como valor inicial), y finalmente entre todas las particiones (usando \u003ccode\u003ecero\u003c/code\u003ede nuevo)\u003c/li\u003e\n          \u003cli\u003ePara operadores no conmutativos el resultado podría ser diferente del obtenido mediante un \u003ccode\u003efold\u003c/code\u003e secuencial\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1498231746658_1477914918",
      "id": "20170623-152906_1430717319",
      "dateCreated": "Jun 23, 2017 3:29:06 PM",
      "dateStarted": "Jul 4, 2017 3:41:53 PM",
      "dateFinished": "Jul 4, 2017 3:41:53 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nrdd \u003d sc.parallelize([range(1,5), range(-10,-3), [\u0027a\u0027, \u0027b\u0027, \u0027c\u0027]])\nprint(rdd.glom().collect())\n\nf \u003d rdd.fold([], lambda x,y: x+y)\nprint(f)\n\n# Se puede hacer un fold de un RDD vacío\nsc.parallelize([]).fold(0, add)\n",
      "user": "anonymous",
      "dateUpdated": "Jul 4, 2017 5:16:38 PM",
      "config": {
        "colWidth": 6.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1499078342485_39617285",
      "id": "20170703-103902_21939567",
      "dateCreated": "Jul 3, 2017 10:39:02 AM",
      "dateStarted": "Jul 4, 2017 5:16:38 PM",
      "dateFinished": "Jul 4, 2017 5:16:39 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\nval rdd \u003d sc.parallelize(List(List.range(1,5), List.range(-10,-3), List(\u0027a\u0027, \u0027b\u0027, \u0027c\u0027)))\nval l \u003d rdd.glom().collect()\n\nval f \u003d rdd.fold(List[AnyVal]())((l1, l2) \u003d\u003e l1 ::: l2)\nprintln(f)\n\n// Se puede hacer un fold de un RDD vacío\nsc.parallelize(List()).fold(0)(_+_)\n",
      "user": "anonymous",
      "dateUpdated": "Jul 4, 2017 5:17:13 PM",
      "config": {
        "colWidth": 6.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1499079349323_-612261723",
      "id": "20170703-105549_1797580218",
      "dateCreated": "Jul 3, 2017 10:55:49 AM",
      "dateStarted": "Jul 4, 2017 5:17:13 PM",
      "dateFinished": "Jul 4, 2017 5:17:19 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\n// Ejemplo de comportamiento extraño\n// Comportamiento en secuencial\nval a \u003d Array(2, 3)\nval f \u003d a.fold(0)((p, v) \u003d\u003e p+v*v) // f \u003d (0 + 2*2) + (3*3) \u003d 13\n\n// Comportamiento en paralelo\nval rdda \u003d sc.parallelize(a, 2)\nval fa \u003d rdda.fold(0)((p, v) \u003d\u003e p+v*v)  \n// Partición 0: fa0 \u003d (0 + 2*2) \u003d 4\n// Partición 1: fa1 \u003d (0 + 3*3) \u003d 9\n// fold final: fa \u003d (0 + fa0*fa0) + (fa1*fa1) \u003d (0 + 4*4) + (9*9) \u003d 97\n\n// El resultado puede variar con el número de particiones\nval rdda \u003d sc.parallelize(a, 1)\nval fa \u003d rdda.fold(0)((p, v) \u003d\u003e p+v*v)\n// ¿Por qué obtenemos este valor?",
      "user": "anonymous",
      "dateUpdated": "Jul 4, 2017 5:26:21 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala"
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1499079552015_-1754506231",
      "id": "20170703-105912_55497367",
      "dateCreated": "Jul 3, 2017 10:59:12 AM",
      "dateStarted": "Jul 4, 2017 5:26:21 PM",
      "dateFinished": "Jul 4, 2017 5:26:26 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n#### Otras acciones de agregación: `aggregate`\n",
      "user": "anonymous",
      "dateUpdated": "Jul 8, 2017 6:32:09 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": false,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch4\u003eOtras acciones de agregación: \u003ccode\u003eaggregate\u003c/code\u003e\u003c/h4\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1499081787595_-579897963",
      "id": "20170703-113627_1578850086",
      "dateCreated": "Jul 3, 2017 11:36:27 AM",
      "dateStarted": "Jul 3, 2017 6:19:11 PM",
      "dateFinished": "Jul 3, 2017 6:19:11 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n  - `aggregate(cero,seqOp,combOp)`: Devuelve una colección agregando los elementos del RDD usando dos funciones:\n    1. `seqOp` -  agregación a nivel de partición: se crea un acumulador por partición (inicializado a `cero`) y se agregan los valores de la partición en el acumulador\n    2. `combOp` - agregación entre particiones: se agregan los acumuladores de todas las particiones\n    -  Ambas agregaciones usan un valor inicial `cero` (similar al caso de `fold`).\n - Versión general de `reduce` y `fold`    \n - La primera función (`seqOp`) puede devolver un tipo, U, diferente del tipo T de los elementos del RDD\n    - `seqOp` agregar datos de tipo T y devuelve un tipo U\n    - `combOp` agrega datos de tipo U\n    - `cero` debe ser de tipo U\n - Permite devolver un tipo diferente al de los elementos del RDD de entrada.",
      "user": "anonymous",
      "dateUpdated": "Jul 8, 2017 6:32:13 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": false,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003eaggregate(cero,seqOp,combOp)\u003c/code\u003e: Devuelve una colección agregando los elementos del RDD usando dos funciones:\n    \u003col\u003e\n      \u003cli\u003e\u003ccode\u003eseqOp\u003c/code\u003e - agregación a nivel de partición: se crea un acumulador por partición (inicializado a \u003ccode\u003ecero\u003c/code\u003e) y se agregan los valores de la partición en el acumulador\u003c/li\u003e\n      \u003cli\u003e\u003ccode\u003ecombOp\u003c/code\u003e - agregación entre particiones: se agregan los acumuladores de todas las particiones\u003c/li\u003e\n    \u003c/ol\u003e\n    \u003cul\u003e\n      \u003cli\u003eAmbas agregaciones usan un valor inicial \u003ccode\u003ecero\u003c/code\u003e (similar al caso de \u003ccode\u003efold\u003c/code\u003e).\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003eVersión general de \u003ccode\u003ereduce\u003c/code\u003e y \u003ccode\u003efold\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003eLa primera función (\u003ccode\u003eseqOp\u003c/code\u003e) puede devolver un tipo, U, diferente del tipo T de los elementos del RDD\n    \u003cul\u003e\n      \u003cli\u003e\u003ccode\u003eseqOp\u003c/code\u003e agregar datos de tipo T y devuelve un tipo U\u003c/li\u003e\n      \u003cli\u003e\u003ccode\u003ecombOp\u003c/code\u003e agrega datos de tipo U\u003c/li\u003e\n      \u003cli\u003e\u003ccode\u003ecero\u003c/code\u003e debe ser de tipo U\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003ePermite devolver un tipo diferente al de los elementos del RDD de entrada.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1499085102599_-117859460",
      "id": "20170703-123142_2117589639",
      "dateCreated": "Jul 3, 2017 12:31:42 PM",
      "dateStarted": "Jul 4, 2017 3:56:46 PM",
      "dateFinished": "Jul 4, 2017 3:56:46 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nl \u003d [1, 2, 3, 4, 5, 6, 7, 8]\nrdd \u003d sc.parallelize(l)\n\n# acc es una tupla de tres elementos (List, Double, Int)\n# En el primer elemento de acc (lista) le concatenamos los elementos del RDD al cuadrado\n# en el segundo, acumulamos los elementos del RDD usando multiplicación\n# y en el tercero, contamos los elementos del RDD\nseqOp  \u003d (lambda acc, val: (acc[0]+[val*val], \n                            acc[1]*val, \n                            acc[2]+1))\n# Para cada partición se genera una tupla tipo acc\n# En esta operación se combinan los tres elementos de las tuplas\ncombOp \u003d (lambda acc1, acc2: (acc1[0]+acc2[0], \n                              acc1[1]*acc2[1], \n                              acc1[2]+acc2[2]))\n                              \na \u003d rdd.aggregate(([], 1., 0), seqOp, combOp) \n\nprint(a)\n\nTest.assertEquals(a[1], 8.*7.*6.*5.*4.*3.*2.*1.)\nTest.assertEquals(a[2], len(l))\n",
      "user": "anonymous",
      "dateUpdated": "Jul 28, 2017 3:07:14 PM",
      "config": {
        "colWidth": 6.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1499085140134_1143023983",
      "id": "20170703-123220_1084599665",
      "dateCreated": "Jul 3, 2017 12:32:20 PM",
      "dateStarted": "Jul 4, 2017 5:38:39 PM",
      "dateFinished": "Jul 4, 2017 5:38:40 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\nval l \u003d List(1, 2, 3, 4, 5, 6, 7, 8)\nval rdd \u003d sc.parallelize(l)\nval dl \u003d rdd.glom.collect()\n\n// acc es una tupla de tres elementos (List[Int], Double, Int)\n// En el primer elemento de acc, insertamos por el principio los elementos del RDD al cuadrado\n// en el segundo, acumulamos los elementos del RDD usando multiplicación\n// y en el tercero, contamos los elementos del RDD\ndef seqOp(acum: (List[Int], Double, Int), valor: Int)  \u003d ((valor*valor) :: acum._1, \n                                                          acum._2 * valor, \n                                                          acum._3 + 1)\n// Para cada partición se genera una tupla tipo acc\n// En esta operación se combinan los tres elementos de las tuplas\ndef combOp(acum1: (List[Int], Double, Int), acum2: (List[Int], Double, Int)) \u003d (acum1._1 ::: acum2._1, \n                                                                                acum1._2 * acum2._2, \n                                                                                acum1._3 + acum2._3)\n\nval a \u003d rdd.aggregate((List[Int](), 1.0, 0))(seqOp, combOp)\n\nassert(a._2 \u003d\u003d (8.0*7.0*6.0*5.0*4.0*3.0*2.0*1.0))\nassert(a._3 \u003d\u003d l.length)",
      "user": "anonymous",
      "dateUpdated": "Jul 28, 2017 3:07:20 PM",
      "config": {
        "colWidth": 6.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1499085218792_-369521346",
      "id": "20170703-123338_1722497343",
      "dateCreated": "Jul 3, 2017 12:33:38 PM",
      "dateStarted": "Jul 4, 2017 5:39:33 PM",
      "dateFinished": "Jul 4, 2017 5:39:38 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n#### Acciones para contar elementos\n- `count()` devuelve un entero con el número exacto de elementos del RDD\n- `countApprox(timeout, confidence\u003d0.95)` versión aproximada de `count()` que devuelve un resultado potencialmente incompleto en un tiempo máximo, incluso si no todas las tareas han finalizado. (Experimental).\n    - `timeout` es un entero largo e indica el tiempo en milisegundos\n    - `confidence` probabilidad de obtener el valor real. Si `confidence` es 0.90 quiere decir que si se ejecuta múltiples veces, se espera que el 90% de ellas se obtenga el valor correcto. Valor [0,1]\n- `countApproxDistinct(relativeSD\u003d0.05)` devuelve una estimación del número de elementos diferentes del RDD.  (Experimental).\n    - `relativeSD` – exactitud relativa (valores más pequeños implican menor error, pero requieren más memoria; debe ser mayor que 0.000017).\n",
      "user": "anonymous",
      "dateUpdated": "Jul 8, 2017 6:32:24 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": false,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch4\u003eAcciones para contar elementos\u003c/h4\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003ecount()\u003c/code\u003e devuelve un entero con el número exacto de elementos del RDD\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ecountApprox(timeout, confidence\u003d0.95)\u003c/code\u003e versión aproximada de \u003ccode\u003ecount()\u003c/code\u003e que devuelve un resultado potencialmente incompleto en un tiempo máximo, incluso si no todas las tareas han finalizado. (Experimental).\n    \u003cul\u003e\n      \u003cli\u003e\u003ccode\u003etimeout\u003c/code\u003e es un entero largo e indica el tiempo en milisegundos\u003c/li\u003e\n      \u003cli\u003e\u003ccode\u003econfidence\u003c/code\u003e probabilidad de obtener el valor real. Si \u003ccode\u003econfidence\u003c/code\u003e es 0.90 quiere decir que si se ejecuta múltiples veces, se espera que el 90% de ellas se obtenga el valor correcto. Valor [0,1]\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ecountApproxDistinct(relativeSD\u003d0.05)\u003c/code\u003e devuelve una estimación del número de elementos diferentes del RDD. (Experimental).\n    \u003cul\u003e\n      \u003cli\u003e\u003ccode\u003erelativeSD\u003c/code\u003e – exactitud relativa (valores más pequeños implican menor error, pero requieren más memoria; debe ser mayor que 0.000017).\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1499085499774_388432343",
      "id": "20170703-123819_1952495873",
      "dateCreated": "Jul 3, 2017 12:38:19 PM",
      "dateStarted": "Jul 4, 2017 7:12:33 PM",
      "dateFinished": "Jul 4, 2017 7:12:33 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nrdd \u003d sc.parallelize([i % 20 for i in xrange(10000)], 16)\nprint(\"Número total de elementos: {0}\".format(rdd.count()))\nprint(\"Número de elementos distintos: {0}\".format(rdd.distinct().count()))\n\nprint(\"Número total de elementos (aprox.): {0}\".format(rdd.countApprox(1, 0.4)))\nprint(\"Número de elementos distintos (approx.): {0}\".format(rdd.countApproxDistinct(0.5)))",
      "user": "anonymous",
      "dateUpdated": "Jul 4, 2017 7:14:34 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1499103090935_-228515398",
      "id": "20170703-173130_1957873231",
      "dateCreated": "Jul 3, 2017 5:31:30 PM",
      "dateStarted": "Jul 4, 2017 7:14:34 PM",
      "dateFinished": "Jul 4, 2017 7:14:39 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n-   `countByValue()` devuelve el número de apariciones de cada elemento del RDD como un mapa (o diccionario) de tipo clave/valor\n    - Las claves son los elementos del RDD y cada valor, el número de ocurrencias de la clave asociada al mismo      ",
      "user": "anonymous",
      "dateUpdated": "Jul 8, 2017 6:32:29 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": false,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003ecountByValue()\u003c/code\u003e devuelve el número de apariciones de cada elemento del RDD como un mapa (o diccionario) de tipo clave/valor\n    \u003cul\u003e\n      \u003cli\u003eLas claves son los elementos del RDD y cada valor, el número de ocurrencias de la clave asociada al mismo\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1499103201103_2062865160",
      "id": "20170703-173321_496682545",
      "dateCreated": "Jul 3, 2017 5:33:21 PM",
      "dateStarted": "Jul 4, 2017 4:12:37 PM",
      "dateFinished": "Jul 4, 2017 4:12:37 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nrdd \u003d sc.parallelize(list(\"abracadabra\")).cache()\nmimapa \u003d rdd.countByValue()\n\nprint(type(mimapa))\nprint(mimapa.items())",
      "user": "anonymous",
      "dateUpdated": "Jul 4, 2017 7:16:51 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1499103973850_69753655",
      "id": "20170703-174613_1907594816",
      "dateCreated": "Jul 3, 2017 5:46:13 PM",
      "dateStarted": "Jul 4, 2017 7:16:51 PM",
      "dateFinished": "Jul 4, 2017 7:16:52 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n#### Acciones para obtener valores\n- Estos métodos deben usarse con cuidado, si el resultado esperado es muy grande puede saturar la memoria del driver",
      "user": "anonymous",
      "dateUpdated": "Jul 8, 2017 6:32:46 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": false,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch4\u003eAcciones para obtener valores\u003c/h4\u003e\n\u003cul\u003e\n  \u003cli\u003eEstos métodos deben usarse con cuidado, si el resultado esperado es muy grande puede saturar la memoria del driver\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1499104012588_656941773",
      "id": "20170703-174652_1161473593",
      "dateCreated": "Jul 3, 2017 5:46:52 PM",
      "dateStarted": "Jul 8, 2017 6:32:40 PM",
      "dateFinished": "Jul 8, 2017 6:32:42 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n-   `collect()` devuelve una lista con todos los elementos del RDD",
      "user": "anonymous",
      "dateUpdated": "Jul 8, 2017 6:32:51 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": false,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003ecollect()\u003c/code\u003e devuelve una lista con todos los elementos del RDD\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1499104605814_-102545977",
      "id": "20170703-175645_49874765",
      "dateCreated": "Jul 3, 2017 5:56:45 PM",
      "dateStarted": "Jul 3, 2017 6:21:50 PM",
      "dateFinished": "Jul 3, 2017 6:21:50 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nlista \u003d rdd.collect()\nprint(lista)",
      "user": "anonymous",
      "dateUpdated": "Jul 4, 2017 5:49:21 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1499104628215_1773351742",
      "id": "20170703-175708_692957162",
      "dateCreated": "Jul 3, 2017 5:57:08 PM",
      "dateStarted": "Jul 4, 2017 5:49:21 PM",
      "dateFinished": "Jul 4, 2017 5:49:22 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n-   `take(n)` devuelve los `n` primeros elementos del RDD\n-   `takeSample(withRep, n, [seed])` devuelve `n` elementos aleatorios del RDD\n    - `withRep`: si True, en la muestra puede aparecer el mismo elemento varias veces\n    - `seed`: semilla para el generador de números aleatorios",
      "user": "anonymous",
      "dateUpdated": "Jul 8, 2017 6:32:55 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": false,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003etake(n)\u003c/code\u003e devuelve los \u003ccode\u003en\u003c/code\u003e primeros elementos del RDD\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003etakeSample(withRep, n, [seed])\u003c/code\u003e devuelve \u003ccode\u003en\u003c/code\u003e elementos aleatorios del RDD\n    \u003cul\u003e\n      \u003cli\u003e\u003ccode\u003ewithRep\u003c/code\u003e: si True, en la muestra puede aparecer el mismo elemento varias veces\u003c/li\u003e\n      \u003cli\u003e\u003ccode\u003eseed\u003c/code\u003e: semilla para el generador de números aleatorios\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1499104664510_-449312006",
      "id": "20170703-175744_233516755",
      "dateCreated": "Jul 3, 2017 5:57:44 PM",
      "dateStarted": "Jul 3, 2017 6:53:38 PM",
      "dateFinished": "Jul 3, 2017 6:53:38 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nt \u003d rdd.take(4)\nprint(t)\ns \u003d rdd.takeSample(False, 4)\nprint(s)\n",
      "user": "anonymous",
      "dateUpdated": "Jul 4, 2017 5:49:45 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1499104715527_-256644752",
      "id": "20170703-175835_855067818",
      "dateCreated": "Jul 3, 2017 5:58:35 PM",
      "dateStarted": "Jul 4, 2017 5:49:46 PM",
      "dateFinished": "Jul 4, 2017 5:49:48 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n-   `top(n)` devuelve una lista con los primeros `n` elementos del RDD ordenados en orden descendente\n-   `takeOrdered(n,[orden])` devuelve una lista con los primeros `n` elementos del RDD en orden ascendente (opuesto a `top`), o siguiendo el orden indicado en la función opcional",
      "user": "anonymous",
      "dateUpdated": "Jul 8, 2017 6:33:05 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": false,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003etop(n)\u003c/code\u003e devuelve una lista con los primeros \u003ccode\u003en\u003c/code\u003e elementos del RDD ordenados en orden descendente\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003etakeOrdered(n,[orden])\u003c/code\u003e devuelve una lista con los primeros \u003ccode\u003en\u003c/code\u003e elementos del RDD en orden ascendente (opuesto a \u003ccode\u003etop\u003c/code\u003e), o siguiendo el orden indicado en la función opcional\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1499105148273_-1416108847",
      "id": "20170703-180548_1087944092",
      "dateCreated": "Jul 3, 2017 6:05:48 PM",
      "dateStarted": "Jul 4, 2017 4:18:51 PM",
      "dateFinished": "Jul 4, 2017 4:18:51 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nrdd \u003d sc.parallelize([8, 4, 2, 9, 3, 1, 10, 5, 6, 7]).cache()\n\nprint(\"4 elementos más grandes: {0}\".format(rdd.top(4)))\n\nprint(\"4 elementos más pequeños: {0}\".format(rdd.takeOrdered(4)))\n\nprint(\"4 elementos más grandes: {0}\".format(rdd.takeOrdered(4, lambda x: -x)))",
      "user": "anonymous",
      "dateUpdated": "Jul 4, 2017 5:51:40 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1499105257970_-538896679",
      "id": "20170703-180737_1728024765",
      "dateCreated": "Jul 3, 2017 6:07:37 PM",
      "dateStarted": "Jul 4, 2017 5:51:40 PM",
      "dateFinished": "Jul 4, 2017 5:51:41 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n",
      "user": "anonymous",
      "dateUpdated": "Jul 7, 2017 10:43:21 AM",
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1499424201987_-1891243114",
      "id": "20170707-104321_1751379695",
      "dateCreated": "Jul 7, 2017 10:43:21 AM",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Curso Spark/03 - Principales transformaciones y acciones",
  "id": "2CC4BSZH7",
  "angularObjects": {
    "2CCY33GTB:shared_process": [],
    "2CCQCYKJM:shared_process": [],
    "2CD8VB8N5:shared_process": [],
    "2CEZ3N4ZK:shared_process": [],
    "2CCN184W1:shared_process": [],
    "2CCTDCCB9:shared_process": [],
    "2CBRCMJB7:shared_process": [],
    "2CDTHYD1N:shared_process": [],
    "2CD85MNWZ:shared_process": [],
    "2CEM88R8V:shared_process": [],
    "2CBSSQJJR:shared_process": [],
    "2CBG9JDC9:shared_process": [],
    "2CBJUH5Z5:shared_process": [],
    "2CET3TKHW:shared_process": [],
    "2CF1VUR2D:shared_process": [],
    "2CCZDD8PX:shared_process": [],
    "2CESEPECG:shared_process": [],
    "2CCZGPF6E:shared_process": []
  },
  "config": {},
  "info": {}
}